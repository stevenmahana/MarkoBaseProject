require('./configure');
require('app-module-path').addPath(__dirname);
require('marko/express'); // Enable res.marko()

var isProduction = process.env.NODE_ENV === 'production';
var env = process.env.NODE_ENV || 'development';
var config = require('./secure/config')[env];

require('lasso').configure({
    outputDir: "public/assets",
    urlPrefix: "/assets",
    minify: isProduction,
    fingerprintsEnabled: isProduction,
    bundlingEnabled: isProduction,
    plugins: [
        'lasso-marko'
    ]
});

var express = require('express')
    , app = express()
    , bodyParser = require('body-parser')
    , session = require('express-session')
    , flash = require('connect-flash')
    , port = process.env.PORT || config.server.port;

app.use(require('lasso/middleware').serveStatic()); // Serve up static assets generated by Lasso

// session management
app.use(session({
    secret: 'myzuperzecret',
    cookie: { maxAge: 2591000000 },
    resave: true,
    saveUninitialized: true
}));
app.use(flash());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: true}));

// Consolidated Routes file to avoid clobbering
require('./routes').addRoutes(app);

app.listen(port, function(err) {
    if (err) {
        // Crash the app if the port is in use, etc.
        throw err;
    }

    console.log('Listening on port %d', port);
    console.log('http://localhost:' + port + '/');

    if (process.send) {
        // Let `browser-refresh` know the is up and running
        process.send('online');
    }
});